<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">


	<!--component-scan并不仅仅是springmvc的配置而是spring的一个基本配置，开启扫描注解功能，只有配置他才能够使用注解的方式声明bean对象 
		，base-package 指定扫描的包，扫描包下的@Service @Controlle @Repositroy @Component，如果在某个类中扫描到以上注解，会自动创建一个类的bean对象保存到ico容器中， 
		所以以上四个注解功能与在xml中声明bean标签功能一样。 根据类所属于的代码层级使用不同的注解。 -->
	<context:component-scan base-package="com.qfedu"></context:component-scan>


	<!-- 初始化数据源,并且使用dbcp连接池，c3p0等连接池步骤相同 -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName"
			value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://39.104.127.63:3306/tourism" />
		<property name="username" value="root" />
		<property name="password" value="123456" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="20"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="1"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="6000"></property>
		<property name="defaultAutoCommit">
			<value>false</value>
		</property>
	</bean>



	<!-- 之前我们写在mybatis_confgig中的配置， mappers也需要在这里进行配置 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations"
			value="classpath:com/qfedu/dao/*.xml"></property>

		<!--指定别名， value是包名,一般指向实体类所在的包，会读取包下所有的类，并且为所有的类声明别名，名字就是类名的首字母小写 -->
		<property name="typeAliasesPackage" value="com.qfedu.pojo" />
	</bean>


	<!-- Mybatis MapperScannerConfigurer 自动扫描 将Mapper接口生成代理注入到Spring -->

	<!-- MapperScannerConfigurer扫描mapper接口文件在的目录，创建目录下所有的接口的实现类，并且会注册到ico容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.qfedu.dao" />
		<property name="sqlSessionFactoryBeanName"
			value="sqlSessionFactory"></property>
	</bean>



	<!-- 事务begin -->
	<!-- mybatis将事务交给spring事务管理器进行处理 -->
	<tx:annotation-driven proxy-target-class="true"
		transaction-manager="txManager" />


	<!-- 事务处理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">

		<property name="dataSource" ref="dataSource" />

	</bean>

	<!-- 事务end -->


</beans>